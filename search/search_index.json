{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Digital Electronics","text":"<p>Welcome to the digital electronics course website!</p> <p>Our goal is to provide resources for teaching some of the most difficult concepts in an introduction to digital electronics course by using generative AI to create lesson plans and simulations.</p> <p>To use this site you can use the search function in the upper right corner or use the navigation system on the left side of the pages.</p> <p>Please let me know if you have any comments or suggestions for improvements.</p> <p>Have fun!</p> <p>Dan McCreary LinkedIn</p>"},{"location":"about/","title":"About the Digital Electronics Course","text":"<p>What are the most difficult concepts for an undergraduate college student to understand in a digital electronics course?</p> <p>In an undergraduate digital electronics course, several concepts are often challenging for students to grasp due to their abstract nature or the level of detail involved. Some of the most difficult concepts typically include:</p> <ol> <li> <p>Boolean Algebra and Logic Gates: Understanding how Boolean algebra relates to the operation of basic logic gates (AND, OR, NOT, NAND, NOR, XOR, XNOR) and their use in creating complex circuits.</p> </li> <li> <p>Karnaugh Maps (K-Maps): These are used for simplifying Boolean expressions and can be quite challenging due to the need for spatial and logical reasoning.</p> </li> <li> <p>Flip-Flops and Latches: The concepts of storage elements like flip-flops and latches, which are fundamental to memory and sequential circuits, can be abstract and require a solid understanding of timing and control signals.</p> </li> <li> <p>Finite State Machines (FSMs): Designing and understanding FSMs, which are models of computation used in sequential logic, can be complex, especially when dealing with larger systems.</p> </li> <li> <p>Timing Analysis: Understanding the timing characteristics of digital circuits, such as setup and hold times, clock skew, and propagation delay, is crucial but can be difficult due to the abstract nature of these concepts.</p> </li> <li> <p>Digital-to-Analog (DAC) and Analog-to-Digital Converters (ADC): Understanding how digital systems interface with the analog world through DACs and ADCs requires a good grasp of both digital and analog principles.</p> </li> <li> <p>Signal Integrity and Noise Issues: Learning about how noise affects digital signals and the techniques used to mitigate these effects can be challenging, especially in high-speed digital design.</p> </li> <li> <p>Microprocessor Architecture and Assembly Language Programming: The intricacies of microprocessor architecture and the details of assembly language programming are often complex for students new to these concepts.</p> </li> <li> <p>Memory Architecture: Understanding different types of memory (RAM, ROM, Cache, etc.) and their architecture can be intricate due to the details involved in how they store and retrieve data.</p> </li> <li> <p>VHDL/Verilog for FPGA Design: Learning hardware description languages like VHDL or Verilog for FPGA (Field-Programmable Gate Array) design can be daunting due to the need to think in terms of hardware rather than software.</p> </li> </ol> <p>These topics require a solid foundation in basic electronics and mathematics, along with the ability to think abstractly and logically. The difficulty often lies in the transition from theoretical knowledge to practical application and understanding how these concepts interconnect to form complex digital systems.</p>"},{"location":"contact/","title":"Contact","text":"<p>Please contact me on LinkedIn</p> <p>Thanks! - Dan</p>"},{"location":"glossary/","title":"Digital Electronics Glossary of Terms","text":""},{"location":"how-we-built-this-site/","title":"How We Built This Site","text":"<p>This page describes how we built this website and some of  the rationale behind why we made various design choices.</p>"},{"location":"how-we-built-this-site/#python","title":"Python","text":"<p>MicroSims are about how we use generative AI to create animations and simulations.  The language of AI is Python.  So we wanted to create a site that could be easily understood by Python developers.</p>"},{"location":"how-we-built-this-site/#mkdocs-vs-docusaurus","title":"Mkdocs vs. Docusaurus","text":"<p>There are two main tools used by Python developers to write documentation: Mkdocs and Docusaurus.  Mkdocs is easier to use and more popular than Docusaurus. Docusaurus is also optimized for single-page applications. Mkdocs also has an extensive library of themes and plugins. None of us are experts in JavaScript or React. Based on our ChatGPT Analysis of the Tradeoffs we chose mkdocs for this site management.</p>"},{"location":"how-we-built-this-site/#github-and-github-pages","title":"GitHub and GitHub Pages","text":"<p>GitHub is a logical choice to store our  site source code and documentation.  GitHub also has a Custom GitHub Action that does auto-deployment if any files on the site change. We don't currently have this action enabled, but other teams can use this feature if they don't have the ability to do a local build with mkdocs.</p> <p>GitHub also has Issues,  Projects and releases that we can use to manage our bugs and tasks.</p> <p>The best practice for low-cost websites that have public-only content is GitHub Pages. Mkdocs has a command (<code>mkdocs gh-deploy</code>) that does deployment directly to GitHub Pages.  This was an easy choice to make.</p>"},{"location":"how-we-built-this-site/#github-clone","title":"GitHub Clone","text":"<p>If you would like to clone this repository, here are the commands:</p> <pre><code>mkdir projects\ncd projects\ngit clone https://github.com/dmccreary/microsims\n</code></pre>"},{"location":"how-we-built-this-site/#after-changes","title":"After Changes","text":"<p>After you make local changes you must do the following:</p> <pre><code># add the new files to a a local commit transaction\ngit add FILES\n# Execute the a local commit with a message about what and why you are doing the commit\ngit commit -m \"comment\"\n# Update the central GitHub repository\ngit push\n</code></pre>"},{"location":"how-we-built-this-site/#material-theme","title":"Material Theme","text":"<p>We had several options when picking a mkdocs theme:</p> <ol> <li>Mkdocs default</li> <li>Readthedocs</li> <li>Third-Party Themes See Ranking</li> </ol> <p>The Material Theme had 16K stars.  No other theme had over a few hundred. This was also an easy design decision.</p> <p>One key criterial was the social Open Graph tags so that when our users post a link to a simulation, the image of the simulation is included in the link.  Since Material supported this, we used the Material theme. You can see our ChatGPT Design Decision Analysis if you want to check our decision process.</p>"},{"location":"how-we-built-this-site/#conda-vs-venv","title":"Conda vs VENV","text":"<p>There are two choices for virtual environments.  We can use the native Python venv or use Conda.  venv is simle but is only designed for pure Python projects.  We imagine that this site could use JavaScript and other langauges in the future, so we picked Conda. There is nothing on this microsite that prevents you from using one or the other.  See the ChatGPT Analysis Here.</p> <p>Here is the conda script that we ran to create a new mkdocs environment that also supports the material social imaging libraries.</p> <pre><code>conda deactivate\nconda create -n mkdocs python=3\nconda activate mkdocs\npip install mkdocs \"mkdocs-material[imaging]\"\n</code></pre>"},{"location":"how-we-built-this-site/#mkdocs-commands","title":"Mkdocs Commands","text":"<p>There are three simple mkdoc commands we use.</p>"},{"location":"how-we-built-this-site/#local-build","title":"Local Build","text":"<pre><code>mkdocs build\n</code></pre> <p>This builds your website in a folder called <code>site</code>.  Use this to test that the mkdocs.yml site is working and does not have any errors.</p>"},{"location":"how-we-built-this-site/#run-a-local-server","title":"Run a Local Server","text":"<pre><code>mkdocs serve\n</code></pre> <p>This runs a server on <code>http://localhost:8000</code>. Use this to test the display formatting locally before you push your code up to the GitHub repo.</p> <pre><code>mkdoc gh-deploy\n</code></pre> <p>This pushes everything up to the GitHub Pages site. Note that it does not commit your code to GitHub.</p>"},{"location":"how-we-built-this-site/#mkdocs-material-social-tags","title":"Mkdocs Material Social Tags","text":"<p>We are using the Material Social tags.  This is a work in progress!</p> <p>Here is what we have learned.</p> <ol> <li>There are extensive image processing libraries that can't be installed with just pip.  You will need to run a tool like brew on the Mac to get the libraries installed.</li> <li>Even after <code>brew</code> installs the libraries, you have to get your environment to find the libraries.  The only way I could get that to work was to set up a local UNIX environment variable.</li> </ol> <p>Here is the brew command that I ran:</p> <pre><code>brew install cairo freetype libffi libjpeg libpng zlib\n</code></pre> <p>I then had to add the following to my ~/.zshrc file:</p> <pre><code>export DYLD_FALLBACK_LIBRARY_PATH=/opt/homebrew/lib\n</code></pre> <p>Note that I am running on a Mac with Apple silicon.  This means that the image libraries that brew downloads must be specific to the Mac Arm instruction set.</p> <ul> <li>Cover images for blog post #4364</li> <li>Discussion on overriding the Social Card Image</li> </ul>"},{"location":"license/","title":"Creative Commons License","text":"<p>All content in this repository is governed by the following license agreement:</p>"},{"location":"license/#license-type","title":"License Type","text":"<p>Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0 DEED)</p>"},{"location":"license/#link-to-license-agreement","title":"Link to License Agreement","text":"<p>https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en</p>"},{"location":"license/#your-rights","title":"Your Rights","text":"<p>You are free to:</p> <ul> <li>Share \u2014 copy and redistribute the material in any medium or format</li> <li>Adapt \u2014 remix, transform, and build upon the material</li> </ul> <p>The licensor cannot revoke these freedoms as long as you follow the license terms.</p>"},{"location":"license/#restrictions","title":"Restrictions","text":"<ul> <li>Attribution \u2014 You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.</li> <li>NonCommercial \u2014 You may not use the material for commercial purposes.</li> <li>ShareAlike \u2014 If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.</li> <li>No additional restrictions \u2014 You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.</li> </ul> <p>Notices</p> <p>You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.</p> <p>No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material.</p> <p>This deed highlights only some of the key features and terms of the actual license. It is not a license and has no legal value. You should carefully review all of the terms and conditions of the actual license before using the licensed material.</p>"},{"location":"lessons/logic-gates/","title":"Logic Gates","text":""},{"location":"sims/flip-flop/","title":"Flip Flop MicroSim","text":"<p>Run the Flip Flop MicroSim Edit the Flip Flop MicroSim</p>"},{"location":"sims/flip-flop/#challenges","title":"Challenges","text":"<p>Explaining electronic components like flip-flops through animation can be challenging due to several reasons:</p> <ol> <li> <p>Abstract Concepts: Flip-flops are digital logic circuits used in electronics and computing. They store and manipulate binary data (0s and 1s). The concepts involved in how they work---like logic gates, binary states, clock signals, and data storage---are abstract and not directly observable, making them hard to represent visually.</p> </li> <li> <p>Complex Functionality: Flip-flops have different types (like SR, JK, D, and T flip-flops) and each type has its unique mode of operation. This complexity can be difficult to condense into a simplified animation without losing essential details.</p> </li> <li> <p>Timing and Synchronization: Flip-flops often operate based on clock signals, and their behavior is dependent on the timing of these signals. Accurately depicting timing and synchronization in an animation can be challenging, as it requires precise representation of these temporal aspects.</p> </li> <li> <p>Scale and Interaction with Other Components: Flip-flops are usually part of larger electronic systems. Showing how they interact with other components in a system (like processors or memory units) within the limited scope of an animation can be difficult, as it might require a broader context that is hard to visualize succinctly.</p> </li> <li> <p>Viewer Background Knowledge: Understanding the operation of flip-flops often requires a background in electronics or computer science. Animations need to be designed considering the viewer's prior knowledge, which can vary widely, making it hard to create a one-size-fits-all explanation.</p> </li> <li> <p>Visual Simplicity vs. Technical Accuracy: Striking the right balance between simplicity for easier understanding and technical accuracy for correctness is a major challenge. Over-simplification can lead to misconceptions, while too much detail can overwhelm the viewer.</p> </li> </ol> <p>To effectively use animation for explaining flip-flops, it's essential to focus on clear, step-by-step visual representations, using metaphor or analogy where possible, and providing sufficient explanatory context to make the abstract concepts more relatable.</p>"},{"location":"sims/flip-flop/#references","title":"References","text":"<ul> <li>Falstage Flip-Flop Simulator</li> <li>WikiPedia Page on Flip Flops</li> </ul>"},{"location":"sims/logic-gates/","title":"Logical Gate Simulations","text":"<p>Our goal in this simulation is to:</p> <ol> <li>Use generative AI to build a library of high-quality logical gate drawings using the p5.js library.</li> <li>Use this library to build a logic simulator that can simulate simple digital logic gates.</li> </ol> <p>Drawing Gates</p>"},{"location":"sims/logic-gates/01-drawing-gates/","title":"Drawing Gates","text":"<p>We will be using the Processing version 5 JavaScript library for doing web-based drawing.  This is called the p5.js library.  Because Processing has been around since 2000 there is able code that generative AI has been trained on.  Getting the correct results is pretty easy. </p> <p>We need a library for drawing gates in our simulators. We use the following drawing conventions:</p> <p>The standard function parameters are:</p> <ol> <li>X position on the canvas</li> <li>Y position on the canvas</li> <li>Width of the gate (not including connecting wires)</li> <li>Height of the gate</li> <li>Length of the connecting wires</li> </ol> <p>The drawing must be made so that the fill color, stroke color, and stroke can all be inherited from the drawing context.</p>"},{"location":"sims/logic-gates/01-drawing-gates/#drawing-basic","title":"Drawing basic","text":""},{"location":"sims/logic-gates/01-drawing-gates/#buffer","title":"Buffer","text":"<p>We will start with a simple buffer logic gate that does not change the input signal.  We use a triangle shape to draw a buffer.</p>"},{"location":"sims/logic-gates/01-drawing-gates/#sample-buffer-prompt","title":"Sample Buffer Prompt","text":"<pre><code>Create a p5.js function called drawBuffer(x,y,w,h,l) for a logic buffer symbol.  The function should take parameters x, y, width, height and wire length.\nPlace the logic gate with the upper left corner of the triangle at the point x,y with a width and height from the parameters.  Add wire length as input and output wires.\n\nCreate a test of this function on a 200x300 canvas drawing three examples of the drawBuffer using different sizes.\n\nDraw the tests on a lightgray background.\n</code></pre> <p>ChatGPT Dialog using the p5.js Visual Art Composer</p>"},{"location":"sims/logic-gates/01-drawing-gates/#sample-buffer-response","title":"Sample Buffer Response","text":"<pre><code>// Draw Buffer Function\nfunction setup() {\n  createCanvas(200, 300);\n  background('lightgray');\n  drawBuffer(50, 50, 30, 40, 20);\n  drawBuffer(100, 120, 40, 60, 30);\n  drawBuffer(30, 200, 50, 70, 40);\n}\n\nfunction drawBuffer(x, y, w, h, l) {\n\n  // Draw input wire\n  line(x - l, y + h / 2, x, y + h / 2);\n\n  // Draw the buffer (triangle)\n  triangle(x, y, x, y + h, x + w, y + h / 2);\n\n  // Draw output wire\n  line(x + w, y + h / 2, x + w + l, y + h / 2);\n}\n</code></pre> <p>Edit this MicroSim on p5.js Editor</p>"},{"location":"sims/logic-gates/01-drawing-gates/#drawing-an-inverter","title":"Drawing an Inverter","text":""},{"location":"sims/logic-gates/01-drawing-gates/#inverter-prompt","title":"Inverter Prompt","text":"<pre><code>That was perfect!\nNow create a new function called drawInverter.\nIt will have exactly the same input parameters,\nbut the drawing will have a small circle at the\nright tip of the triangle.\n\nDraw the tests on a lightgray background.\n</code></pre>"},{"location":"sims/logic-gates/01-drawing-gates/#inverter-response","title":"Inverter Response","text":"<pre><code>// Draw Inverter\n// Test the drawInverter function with different sizes\n\nfunction setup() {\ncreateCanvas(200, 300);\nbackground(240); // light gray background\ndrawInverter(50, 50, 30, 40, 20);\ndrawInverter(100, 120, 40, 60, 30);\ndrawInverter(30, 200, 50, 70, 40);\n}\n\nfunction drawInverter(x, y, w, h, l) {\n// Draw input wire\nline(x - l, y + h / 2, x, y + h / 2);\n\n// Draw the buffer (triangle)\ntriangle(x, y, x, y + h, x + w, y + h / 2);\n\n// Draw output wire\nline(x + w, y + h / 2, x + w + l, y + h / 2);\n\n// Draw small circle at the right tip of the triangle\ncircle(x + w, y + h / 2, w / 5);\n}\n</code></pre>"},{"location":"sims/logic-gates/01-drawing-gates/#the-and-gate","title":"The AND Gate","text":""},{"location":"sims/logic-gates/01-drawing-gates/#sample-and-prompt","title":"Sample AND Prompt","text":"<pre><code>That was also perfect!\nNow create a new function called drawAND that will draw\na AND logic gate.\nThis will be similar to the previous functions,\nbut instead of drawing a triangle you will need\nto make the right side of the shape a circle.\nPlace a series of points on the canvas using the vertex(x,y) function that makes the correct shape.\nUse beginShape() and endShape() around the points.\n</code></pre>"},{"location":"sims/logic-gates/01-drawing-gates/#sample-and-response","title":"Sample AND Response","text":"<pre><code>// Draw And Logic Gate\n// Test the drawAND function with different sizes\n\nfunction setup() {\ncreateCanvas(200, 300);\nbackground(200); // light gray background\ndrawAND(50, 20, 40, 40, 20);\ndrawAND(100, 70, 40, 60, 30);\ndrawAND(80, 150, 70, 50, 20);\n}\n\nfunction drawAND(x, y, w, h, l) {\n// Draw input wires\nline(x - l, y + h / 3, x, y + h / 3);\nline(x - l, y + 2 * h / 3, x, y + 2 * h / 3);\n\n// Draw the AND gate shape\nbeginShape();\nvertex(x, y); // top left corner\nvertex(x + w * 0.6, y); // top right corner (start of semicircle)\n// Create semicircle\nfor (let angle = -HALF_PI; angle &lt;= HALF_PI; angle += 0.01) {\nlet sx = x + w * 0.6 + cos(angle) * w * 0.4;\nlet sy = y + h / 2 + sin(angle) * h / 2;\nvertex(sx, sy);\n}\nvertex(x + w * 0.6, y + h); // bottom right corner (end of semicircle)\nvertex(x, y + h); // bottom left corner\nendShape(CLOSE);\n\n// Draw output wire\nline(x + w, y + h / 2, x + w + l, y + h / 2);\n}\n</code></pre>"},{"location":"sims/logic-gates/01-drawing-gates/#failed-attempts-at-or-gate","title":"Failed Attempts at OR Gate","text":"<p>This is where GPT-4 falls apart.  Despite my best attempts, I could not get GPT-4 to correctly draw the complex curves needed for a logical OR gate.  You can see the results in the transcript.</p> <p>I had to resort to manually drawing the curves, which was a slow-painful process and took several hours to make it robust enough that it could work with a variety of sizes.</p> <p>I think this really demonstrates the limits of what GPT-4 is capable of, and what it can't do.</p> <p></p> <p>Edit the Logical OR gate MicroSim</p> <p>One hint that GPT-4 did give was to use the map function to have the x-coordinates move linearly and only use the sin() functions on the y-coordinates.  This worked reasonably well and the curves do match up pretty closely with the official SVG drawing of the OR gate. If you want a precise mapping you can also write a program that converts the SVG points to a set of (x,y) points.</p>"},{"location":"sims/logic-gates/01-drawing-gates/#nor-symbol-prompt","title":"NOR Symbol Prompt","text":"<p>Once we have a good OR gate, we can ask GPT to just use that to create a NOR gate.  All it has to do is add a circle on the output.</p> <p>Here is the code it generated:</p> <pre><code>function drawNOR(x, y, w, h, l) {\n// Draw the OR part\ndrawOR(x, y, w, h, l);\n\n// Draw the NOT circle at the output\nlet outputX = x + w + l * 0.5;\nlet outputY = y + h / 2;\nlet circleRadius = l * 0.3;\nellipse(outputX, outputY, circleRadius, circleRadius);\n}\n</code></pre> <p>So it is clear that GPT-4 has been trained on how to add a small bit of drawing to an existing function.</p> <p>Note that it tends to use ellipse() rather than circle(). I don't know exactly why it does this.  Perhaps it believes that ellipse is more general and easier to customize.  I think that circle with only three parameters is a little easier to read.</p>"},{"location":"sims/logic-gates/01-drawing-gates/#xor-gate","title":"XOR Gate","text":""},{"location":"sims/logic-gates/01-drawing-gates/#xnor-prompt","title":"XNOR Prompt","text":"<pre><code>Now can you please repeat the same process \nbut this time generate the code for an exclusive OR.  \nPlease call the new function drawXOR and make the \nparameters exactly the same.\n</code></pre> <p>It got the result pretty close.  The only real cleanup is to move the new arc to the end and add a noFill() for the new extra curve. This is an easy to change.</p>"},{"location":"sims/logic-gates/01-drawing-gates/#xnor","title":"XNOR","text":"<p>Our last function is XNOR, which just adds a circle to the XOR symbol.</p> <p>Edit the XNOR MicroSim</p> <p>Note that we did not automatically fill the circle with black.  We decided to inherit the fill from the drawing context.  Forcing the circle to fill with black is a valid option and might make drawings a little easier to read.  This could also be an additional parameter to these functions.</p>"},{"location":"sims/template/","title":"MicroSim Template","text":"![Image Name](./image.png){ width=\"400\" }    Figure caption. <p>Run the MicroSim Edit the MicroSim</p>"},{"location":"sims/template/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us how to specify the drawing of a static filled circle.</p>"},{"location":"sims/template/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a single file p5.js sketch.\nDraw a green circle on a 600x400 canvas with a radius of 200.\n</code></pre>"},{"location":"sims/template/#sample-response","title":"Sample Response","text":"<pre><code>let canvasHeight = 400;\nlet aspectRatio = 1.91; // Open Graph standard\nlet canvasWidth = canvasHeight * aspectRatio;\nlet radius = 200;\nfunction setup() {\nconst canvas = createCanvas(canvasWidth, canvasHeight);\ncanvas.parent('canvas-container');\nfill(245);\nrect(0,0, canvasWidth, canvasHeight);\nfill('green');\ncircle(canvasWidth/2, canvasHeight/2, radius);\n}\n</code></pre>"},{"location":"sims/template/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/template/#grade-level-subject-and-topic","title":"Grade Level, Subject and Topic","text":"<p>9th grade geometry. Circle and radius.</p>"},{"location":"sims/template/#activities","title":"Activities","text":""},{"location":"sims/template/#fill-color","title":"Fill Color","text":"<p>Change the color in the prompt.  You can specify any one of the 140 named colors.</p>"},{"location":"sims/template/#border-weight","title":"Border Weight","text":"<p>Change the prompt to include a black border of width 10.</p>"},{"location":"sims/template/#border-color","title":"Border Color","text":"<p>Change the prompt to make the border purple.</p>"},{"location":"sims/template/#change-the-radius","title":"Change the Radius","text":"<p>Change the prompt to make the circle smaller or larger by changing the radius from 10 to 200.</p>"},{"location":"sims/template/#change-the-location","title":"Change the Location","text":"<p>Change the prompt to move the circle to the left or right.</p>"}]}